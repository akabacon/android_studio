package com.example.myapplication

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.Canvas
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.gestures.detectDragGestures
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Slider
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.*
import androidx.compose.runtime.snapshots.SnapshotStateList
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.input.pointer.pointerInput
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.lifecycle.ViewModel
import com.example.myapplication.ui.theme.MyApplicationTheme

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            MyApplicationTheme {
                Surface(modifier = Modifier.fillMaxSize(), color = MaterialTheme.colorScheme.background) {
                    DefaultPreview()
                }
            }
        }
    }
}

data class Line(
    val start: Offset,
    val end: Offset,
    val color: Color = Color.Black,
    val strokeWidth: Float = 10.0f
)

class LineModel : ViewModel() {

    var sHue by mutableStateOf(200f)
    var sSat by mutableStateOf(0.7f)
    var sLit by mutableStateOf(0.2f)
    var sWid by mutableStateOf(10f)

    fun changeHue(xxx: Float) { sHue = xxx }
    fun changeSat(xxx: Float) { sSat = xxx }
    fun changeLit(xxx: Float) { sLit = xxx }
    fun changeWid(xxx: Float) { sWid = xxx }

    var lines: SnapshotStateList<Line> = mutableStateListOf()
}

@Composable
fun painting(model: LineModel) {
    Column (modifier = Modifier.padding(20.dp)){
        Spacer(modifier = Modifier.height(20.dp))
        Box(
            modifier = Modifier
                .width(200.dp)
                .height(100.dp)
                .background(Color.hsl(model.sHue, model.sSat, model.sLit))
        )
        SliderRow(
            label = "Width",
            value = model.sWid,
            onValueChange = { model.changeWid(it) },
            valueRange = 5f..30f
        )
        SliderRow(
            label = "hue",
            value = model.sHue,
            onValueChange = { model.changeHue(it) },
            valueRange = 0f..360f
        )
        SliderRow(
            label = "sat",
            value = model.sSat,
            onValueChange = { model.changeSat(it) },
            valueRange = 0f..1f
        )
        SliderRow(
            label = "lit",
            value = model.sLit,
            onValueChange = { model.changeLit(it) },
            valueRange = 0f..1f
        )
        DrawingCanvas(model = model)
    }
}

@Composable
fun SliderRow(
    label: String,
    value: Float,
    onValueChange: (Float) -> Unit,
    valueRange: ClosedFloatingPointRange<Float>
) {
    Row(verticalAlignment = Alignment.CenterVertically) {
        Text(text = label, modifier = Modifier.weight(0.1f))
        Slider(
            value = value,
            onValueChange = onValueChange,
            valueRange = valueRange,
            steps = 100,
            modifier = Modifier.weight(0.9f),
        )
        Text(String.format("%.0f", value), Modifier.weight(0.1f))
    }
}

@Composable
fun DrawingCanvas(model: LineModel) {
    Box(modifier = Modifier.padding(20.dp)) {
        Canvas(
            modifier = Modifier
                .fillMaxSize()
                .pointerInput(Unit) {
                    detectDragGestures { change, dragAmount ->
                        change.consume()
                        val nLine = Line(
                            start = change.position - dragAmount,
                            end = change.position,
                            color = Color.hsl(model.sHue, model.sSat, model.sLit),
                            strokeWidth = model.sWid,
                        )
                        model.lines.add(nLine)
                    }
                },
            onDraw = {
                model.lines.forEach { line ->
                    drawLine(
                        start = line.start,
                        end = line.end,
                        color = line.color,
                        strokeWidth = line.strokeWidth,
                    )
                }
            }
        )
    }
}

@Preview(showBackground = true)
@Composable
fun DefaultPreview() {
    MyApplicationTheme {
        painting(model = LineModel())
    }
}
